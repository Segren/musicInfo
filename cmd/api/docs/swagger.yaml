basePath: /
definitions:
  data.Metadata:
    properties:
      currentPage:
        type: integer
      first_page:
        type: integer
      last_page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    type: object
  data.Song:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      name:
        type: string
      releaseDate:
        type: string
      text:
        type: string
      version:
        type: integer
    type: object
  data.SongsResponse:
    properties:
      metadata:
        $ref: '#/definitions/data.Metadata'
      songs:
        items:
          $ref: '#/definitions/data.Song'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing music library
  title: Music API
  version: 0.0.1
paths:
  /songs:
    get:
      consumes:
      - application/json
      description: Retrieve a list of songs with optional filters and pagination
      parameters:
      - description: Filter by group
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: name
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: page_size
        type: integer
      - description: Sort order (e.g., 'id', '-id', 'name', '-name')
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of songs with metadata
          schema:
            $ref: '#/definitions/data.SongsResponse'
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get list of songs
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Create a new song by providing the group name and song title. Additional
        details are fetched from an external API.
      parameters:
      - description: Group and song details
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/data.Song'
      produces:
      - application/json
      responses:
        "201":
          description: The newly created song
          headers:
            Location:
              description: /songs/{id}" "URL of the created song
              type: string
          schema:
            $ref: '#/definitions/data.Song'
        "422":
          description: Unprocessable Entity
          schema:
            type: string
        "500":
          description: the server encountered a problem and could not process your
            request
          schema:
            type: string
      summary: Add a new song
      tags:
      - songs
  /songs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a song by its ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Message indicating successful deletion
          schema:
            type: string
        "404":
          description: Song not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete a song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update the details of an existing song by its ID.
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Song details to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/data.Song'
      produces:
      - application/json
      responses:
        "200":
          description: Updated song data
          schema:
            $ref: '#/definitions/data.Song'
        "400":
          description: Bad request or invalid input
          schema:
            type: string
        "404":
          description: Song not found
          schema:
            type: string
        "409":
          description: Edit conflict occurred
          schema:
            type: string
        "422":
          description: Validation error
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update song details
      tags:
      - songs
  /songs/{id}/lyrics:
    get:
      consumes:
      - application/json
      description: Retrieve song lyrics with pagination by verses
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of verses per page
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Lyrics with pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request or invalid parameters
          schema:
            type: string
        "404":
          description: Song not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get lyrics of a song
      tags:
      - songs
swagger: "2.0"
